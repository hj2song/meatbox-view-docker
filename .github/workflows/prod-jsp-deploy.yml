name: Deploy Docker Image(PROD/JSP)

on:
  workflow_dispatch:
    inputs:
      runDeploy:
        type: string
        required: true
      IMAGE_TAG:
        type: string
        required: false
 
run-name: ${{ github.event.inputs.IMAGE_TAG || 'Latest Tag Deploy' }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:                # Job-level permissions configuration starts here
      contents: write           # 'write' access to repository contents

    steps:
    # 유효한 배포인지 확인
    - name: Check runDeploy input
      run: |
        if [[ "${{ github.event.inputs.runDeploy }}" != "${{ secrets.APP }}" && "${{ github.event.inputs.runDeploy }}" != "true" ]]; then
          echo "Error: Invalid value for runDeploy."
          exit 1
        else
          echo "runDeploy input is valid."
        fi

    # 이미지 태그 값 설정: 값이 없으면 최신 태그 자동 가져오기
    - name: Set Docker Image Tag
      run: |
        if [ -z "${{ github.event.inputs.IMAGE_TAG }}" ]; then
          TAG=$(curl -s -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
          https://api.github.com/repos/${{ secrets.SOURCE_REPO }}/tags \
          | jq -r '[.[] | select(.name | test("^[0-9]{4}/w[0-9]{2}/master-[0-9]{8}_v[0-9]{2}$"))]
                     | sort_by(.name | capture("(?<year>[0-9]{4})/w(?<week>[0-9]{2})/master-(?<date>[0-9]{8})_v(?<version>[0-9]{2})") |
                                .year, .week, .date, .version | tonumber)
                     | reverse
                     | .[0].name')
          echo $TAG
          IMAGE_TAG=${TAG//\//_}  # 슬래시를 언더스코어로 대체
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        else
          TAG=${{ github.event.inputs.IMAGE_TAG }}
          IMAGE_TAG=${TAG//\//_}  # 슬래시를 언더스코어로 대체
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        fi
        echo "Docker Image Tag: ${IMAGE_TAG}"

    # # Slack 배포 시작 알림
    # - name: Send Slack Notification (Start)
    #   run: |
    #     curl -X POST -H 'Content-type: application/json' \
    #     --data '{"channel": "#slack_alert_test", "username": "Meatbox Deploy Bot", "icon_emoji": ":meatbox:", "text": "🚀 *Deploy Started* for meatbox-${{ secrets.APP }} Docker Image. Tag: `'"$IMAGE_TAG"'`"}' \
    #     ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        path: docker

    - name: Checkout other repository
      uses: actions/checkout@v3
      with:
        repository: ${{ secrets.SOURCE_REPO }}
        path: ${{ secrets.APP }}
        token: ${{ secrets.ACCESS_TOKEN }}
        ref: '${{ github.event.inputs.IMAGE_TAG }}'

    # Docker Build에 필요한 파일을 DEPLOY 경로로 이동
    - name: move deploy file
      run: |
        cp -a ${{ secrets.VIEW_PATH }}/webapp/WEB-INF/views ${{ secrets.DOCKER_PATH }}/deploy/views
        mv ${{ secrets.DOCKER_PATH }}/deploy/.dockerignore-jsp ${{ secrets.DOCKER_PATH }}/deploy/.dockerignore


    # # Minify 수행
    # - name: ant build
    #   run: ant -f ${{ secrets.APP }}/build.xml dist

    # Nexus Login
    - name: Login to Nexus Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.NEXUS_REGISTRY }}
        username: ${{ secrets.NEXUS_USERNAME }}
        password: ${{ secrets.NEXUS_PASSWORD }}

    # buildx 설정
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 이미지 빌드 및 푸시
    - name: Build and Push
      uses: docker/build-push-action@v6
      with:
        context: ${{ secrets.DOCKER_PATH }}/deploy
        file: ${{ secrets.DOCKER_PATH }}/deploy/Dockerfile-${{ secrets.APP }}  # 사용할 Dockerfile
        push: true
        tags: |
          ${{ secrets.NEXUS_REGISTRY }}/prod/meatbox/${{ secrets.APP }}:${{ env.IMAGE_TAG }}
          ${{ secrets.NEXUS_REGISTRY }}/prod/meatbox/${{ secrets.APP }}:latest
        cache-from: type=gha # gha 는 Guthub Actions 용 캐시를 의미
        cache-to: type=gha,mode=max

    # Image Deployment
    - name: Deploy Image
      run: |
        echo | openssl s_client -showcerts -servername portainer.meatbox.co.kr -connect portainer.meatbox.co.kr:443 2>/dev/null | openssl x509 -outform PEM > portainer-cert.pem
        curl -X POST https://portainer.meatbox.co.kr/api/webhooks/18335019-6184-4c35-9e68-64dab57f1c30 --cacert portainer-cert.pem

    # # Slack 배포 완료 알림
    # - name: Send Slack Notification (Completed)
    #   if: success()  # 성공한 경우에만 실행
    #   run: |
    #     curl -X POST -H 'Content-type: application/json' \
    #     --data '{"channel": "#slack_alert_test", "username": "Meatbox Deploy Bot", "icon_emoji": ":meatbox:", "text": "✅ *Deploy Completed* for meatbox-${{ secrets.APP }} Docker Image. Tag: `'"$IMAGE_TAG"'`"}' \
    #     ${{ secrets.SLACK_WEBHOOK_URL }}

    # # Slack 배포 실패 알림
    # - name: Send Slack Notification (Failed)
    #   if: failure()  # 실패한 경우에만 실행
    #   run: |
    #     curl -X POST -H 'Content-type: application/json' \
    #     --data '{"channel": "#slack_alert_test", "username": "Meatbox Deploy Bot", "icon_emoji": ":meatbox:", "text": "❌ *Deploy Failed* for meatbox-${{ secrets.APP }} Docker Image."}' \
    #     ${{ secrets.SLACK_WEBHOOK_URL }}

# NEXUS_USERNAME=
# NEXUS_PASSWORD=
# NEXUS_REGISTRY=nexus.meatbox.co.kr:5001
# VIEW=view
# DOCKER_PATH=docker/view
# VIEW_PATH=view/src/main
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/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
# ACCESS_TOKEN=
# SOURCE_REPO=meatbox-git/meatbox-web
