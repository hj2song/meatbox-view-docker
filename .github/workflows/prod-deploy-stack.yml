name: Deploy Stack(PROD/STATIC)

on:
  push:
    paths:
      - 'static/deploy/docker-compose.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # # Slack 배포 시작 알림
    # - name: Send Slack Notification (Start)
    #   run: |
    #     curl -X POST -H 'Content-type: application/json' \
    #     --data '{"channel": "#deploy", "username": "Meatbox Deploy Bot", "icon_emoji": ":meatbox:", "text": "🛠️ *Update Stack Started* for meatbox-${{ secrets.STATIC }}"}' \
    #     ${{ secrets.SLACK_WEBHOOK_URL }}
   
   # Stack Deployment
    - name: Deploy Stack
      run: |
        echo | openssl s_client -showcerts -servername portainer.meatbox.co.kr -connect portainer.meatbox.co.kr:443 2>/dev/null | openssl x509 -outform PEM > portainer-cert.pem
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST https://portainer.meatbox.co.kr/api/stacks/webhooks/31f8db1a-b1eb-4357-ab14-b7f55e682e48 --cacert portainer-cert.pem)
        if [ "$response" -ne 200 ] && [ "$response" -ne 204 ]; then
          echo "Stack deployment failed with response code $response"
          exit 1
        fi

    # # Slack 배포 완료 알림
    # - name: Send Slack Notification (Completed)
    #   if: success()  # 성공한 경우에만 실행
    #   run: |
    #     curl -X POST -H 'Content-type: application/json' \
    #     --data '{"channel": "#deploy", "username": "Meatbox Deploy Bot", "icon_emoji": ":meatbox:", "text": "✅ *Update Stack Completed* for meatbox-${{ secrets.STATIC }}"}' \
    #     ${{ secrets.SLACK_WEBHOOK_URL }}

    # # Slack 배포 실패 알림
    # - name: Send Slack Notification (Failed)
    #   if: failure()  # 실패한 경우에만 실행
    #   run: |
    #     curl -X POST -H 'Content-type: application/json' \
    #     --data '{"channel": "#deploy", "username": "Meatbox Deploy Bot", "icon_emoji": ":meatbox:", "text": "❌ *Update Stack Failed* for meatbox-${{ secrets.STATIC }}"}' \
    #     ${{ secrets.SLACK_WEBHOOK_URL }}

